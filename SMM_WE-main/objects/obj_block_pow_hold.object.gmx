<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_block_pow</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_holdparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
switch global.apariencia
{
    case 0:
        sprite_index = spr_SMB_pow
        break
    case 1:
        sprite_index = spr_SMB3_pow
        break
    case 2:
        sprite_index = spr_block_pow
        break
    case 3:
        sprite_index = spr_NSMBU_pow
        image_speed = 0
        break
}

if (global.apariencia != 3)
    image_speed = 0.15
explode = 0
inmune = 0
mytop = instance_create(x, y, obj_solidphy)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
if (mytop != obj_lighting &amp;&amp; instance_exists(mytop))
{
    with (mytop)
        instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>inmune = 0
if (!place_meeting(x, y, obj_mario))
{
    if (mytop == 0)
        mytop = instance_create(x, y, obj_solidphy)
}
else
    alarm[1] = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (mytop != obj_lighting &amp;&amp; instance_exists(mytop) &amp;&amp; instance_exists(obj_mario))
{
    mytop.x = x
    mytop.y = y
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var col_mario, col_estalactita, col_mario_left, col_mario_right, col_shell2;
if (y &lt; -20 &amp;&amp; vspeed &lt; 0)
    y = -20
col_mario = collision_rectangle(bbox_left, (bbox_top - 6), bbox_right, bbox_top, obj_mario, 1, 0)
if instance_exists(obj_mario)
{
    if (col_mario &amp;&amp; global.powerup == -77 &amp;&amp; global.yoshi == 0 &amp;&amp; obj_mario.can_break_block == 1)
    {
        explode = 1
        event_user(6)
        with (obj_mario)
        {
            jumpnow = 2
            state = 2
            alarm[4] = 15
            if (isswim == 1)
                vspeed = -2
            else
                vspeed = -4
            y--
        }
    }
    else if (col_mario &amp;&amp; col_mario.groundpount == 2)
    {
        explode = 1
        event_user(6)
    }
}
if (collision_rectangle(bbox_left, (bbox_top - 6), bbox_right, (bbox_top + 6), obj_mario, 0, 0) &amp;&amp; inmune == 0 &amp;&amp; modo_lava == 0 &amp;&amp; vspeed &gt; 0 &amp;&amp; obj_mario.state &lt; 2 &amp;&amp; gravity != 0)
{
    hspeed = (max(0, (abs(hspeed) - 0.075)) * sign(hspeed))
    if (abs(hspeed) &lt; 0.075)
        hspeed = 0
    obj_mario.x += hspeed
    obj_mario.y = ceil((bbox_top - (31 - vspeed)))
    obj_mario.gravity = 0
    obj_mario.vspeed = 0
    with (obj_mario)
        event_user(15)
}
col_estalactita = collision_rectangle(bbox_left, (bbox_top - 6), bbox_right, bbox_top, obj_icicle, 1, 0)
if (col_estalactita &amp;&amp; col_estalactita.vspeed &gt; 0 &amp;&amp; held == 0)
{
    explode = 1
    event_user(6)
    with (col_estalactita)
        event_user(0)
}
if (held == 0)
{
    col_mario_left = collision_rectangle((bbox_left - 6), (bbox_top + 4), bbox_left, (bbox_bottom - 4), obj_mario, 0, 0)
    col_mario_right = collision_rectangle(bbox_right, (bbox_top + 4), (bbox_right + 6), (bbox_bottom - 4), obj_mario, 0, 0)
    if (instance_exists(obj_mario) &amp;&amp; ((col_mario_left &amp;&amp; obj_mario.direct == 1) || (col_mario_right &amp;&amp; obj_mario.direct == -1)) &amp;&amp; scr_canhold() &amp;&amp; inmune == 0)
    {
        if (mytop != obj_lighting &amp;&amp; instance_exists(mytop))
        {
            with (mytop)
                instance_destroy()
            mytop = obj_lighting
        }
        obj_mario.holding = 2
        if (global.apariencia == 2 &amp;&amp; obj_mario.isduck == 1)
            obj_mario.isduckhold = 1
        if (global.apariencia == 3)
        {
            audio_play_sound(choose(475, 476), 0, false)
            with (other.id)
            {
                triple_jump = 0
                triple_count = 0
            }
        }
        held = 1
        explode = 0
        depth = -7
        gravity = 0
        speed = 0
    }
    if (global.bg_level == "underwater" || (global.bg_level == "sky" &amp;&amp; global.modo_noche == 1) || (global.bg_level == "airship" &amp;&amp; global.modo_noche == 1) || (instance_exists(obj_lava_water) &amp;&amp; y &gt; (obj_lava_water.y + 16) &amp;&amp; ((global.bg_level == "forest" &amp;&amp; global.modo_noche == 0) || global.bg_level == "beach")))
        swimming = 1
    else
        swimming = 0
    if instance_exists(obj_mario)
    {
        if (inwall == 0)
        {
            col_shell1 = collision_rectangle(bbox_left, bbox_bottom, bbox_right, (bbox_bottom + 1), obj_enemyparent_held, 0, 0)
            if (col_shell1 &amp;&amp; col_shell1.vspeed &lt; 0 &amp;&amp; col_shell1.held == 0)
            {
                explode = 1
                event_user(6)
                with (col_shell1)
                    event_user(0)
            }
            col_shell2 = collision_rectangle((bbox_left - 1), (bbox_top + 2), (bbox_right + 1), (bbox_bottom - 2), obj_shell_held, 0, 0)
            if (col_shell2 &amp;&amp; col_shell2.bbox_bottom &gt; (bbox_top + 5))
            {
                explode = 1
                event_user(6)
                with (col_shell2)
                    event_user(0)
            }
            event_user(3)
            event_user(4)
            if (gravity == 0)
            {
                if (swimming == 0)
                {
                    hspeed = (max(0, (abs(hspeed) - 0.145)) * sign(hspeed))
                    if (abs(hspeed) &lt; 0.145)
                        hspeed = 0
                }
                else if (swimming == 1)
                {
                    hspeed = (max(0, (abs(hspeed) - 0.245)) * sign(hspeed))
                    if (abs(hspeed) &lt; 0.244)
                        hspeed = 0
                }
            }
        }
        else
        {
            gravity /= 2
            if (vspeed &gt; 1)
                vspeed = 1
            hspeed = 0
            while collision_rectangle(bbox_right, (bbox_top + 4), bbox_right, (bbox_bottom - 4), obj_solid, 1, 0)
                x--
            while collision_rectangle(bbox_left, (bbox_top + 4), bbox_left, (bbox_bottom - 4), obj_solid, 1, 0)
                x++
            if (!collision_rectangle(bbox_left, (bbox_top + 4), bbox_right, (bbox_bottom - 1), obj_solid, 0, 0))
                inwall = 0
        }
    }
    else if instance_exists(obj_deadmario)
    {
        vspeed = 0
        gravity = 0
    }
    else
    {
        event_user(3)
        event_user(4)
    }
    if (instance_exists(obj_lava_water) &amp;&amp; (y + 8) &gt;= (obj_lava_water.y - 12) &amp;&amp; global.bg_level == "castle" &amp;&amp; modo_lava == 0)
    {
        if (global.apariencia != 0)
            instance_create((x + 8), (obj_lava_water.y - 26), obj_splash_lava)
        modo_lava = 1
    }
    else if (instance_exists(obj_lava_water) &amp;&amp; (y + 8) &gt;= obj_lava_water.y &amp;&amp; global.bg_level == "forest" &amp;&amp; global.modo_noche == 1 &amp;&amp; modo_lava == 0)
    {
        if (global.apariencia != 0)
            instance_create((x + 8), (obj_lava_water.y - 26), obj_splash_posion)
        modo_lava = 1
    }
    else if (y &gt; room_height &amp;&amp; held == 0)
        instance_destroy()
    if (instance_exists(obj_lava_water) &amp;&amp; (y + 8) &lt;= (obj_lava_water.y - 12) &amp;&amp; obj_lava_water.vspeed &gt; 0 &amp;&amp; (modo_lava == 1 || swimming == 1))
        y = (obj_lava_water.y - 20)
}
else if (mytop != obj_lighting &amp;&amp; instance_exists(mytop))
{
    with (mytop)
        instance_destroy()
    mytop = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_blockparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (held == 0 &amp;&amp; other.vspeed &lt; 0)
{
    explode = 1
    event_user(6)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemyparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (other.object_index != obj_grinder)
{
    if (explode == 1)
    {
        with (other.id)
        {
            dead_h = 1
            event_user(0)
        }
        event_user(6)
        instance_destroy()
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_boomboom">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (other.object_index != obj_grinder)
{
    if (explode == 1)
    {
        with (other.id)
        {
            dead_h = 1
            event_user(0)
        }
        event_user(6)
        instance_destroy()
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_thwomp">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (other.ready == 1 &amp;&amp; held == 0)
{
    with (other.id)
        event_user(0)
    explode = 1
    event_user(6)
}
else if (explode == 1)
{
    with (other.id)
    {
        dead_h = 1
        event_user(0)
    }
    event_user(6)
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_mario">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (held == 0 &amp;&amp; inmune == 0 &amp;&amp; bouncy == 1)
{
    if (hspeed &gt; 0 &amp;&amp; (other.bbox_left + (bbox_right / 2)) &lt; (bbox_left + (bbox_right / 2)))
    {
        hspeed = (other.hspeed + 1.2)
        vspeed = -1.5
        explode = 0
    }
    else if (hspeed &lt; 0 &amp;&amp; (other.bbox_left + (bbox_right / 2)) &gt; (bbox_left + (bbox_right / 2)))
    {
        hspeed = (other.hspeed - 1.2)
        vspeed = -1.5
        explode = 0
    }
    else if (hspeed &gt; 0)
    {
        hspeed = (other.hspeed + 1.2)
        vspeed = -1.5
        explode = 0
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (explode == 1)
{
    init_shake(1)
    instance_create(x, y, obj_block_pow_active)
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var semisolid, physolid, col_one_top, solidphy, col_one_bottom, block;
if (vspeed &gt;= 0)
{
    semisolid = collision_rectangle(bbox_left, (bbox_bottom - 1), bbox_right, (bbox_bottom + vspeed), obj_solidtop, 0, 0)
    physolid = collision_rectangle(bbox_left, (bbox_bottom - 1), bbox_right, (bbox_bottom + vspeed), obj_physicssolid, 0, 0)
    if (semisolid &amp;&amp; bbox_bottom &lt; (semisolid.yprevious + 5))
        y = (semisolid.bbox_top - (sprite_height - sprite_get_yoffset(sprite_index)))
    if (physolid &amp;&amp; bbox_bottom &lt; (physolid.yprevious + 5))
        y = (physolid.bbox_top - (sprite_height - sprite_get_yoffset(sprite_index)))
    if (vspeed &gt; 4)
        vspeed = 4
}
if ((collision_rectangle(bbox_left, (bbox_bottom - 1), bbox_right, (bbox_bottom + 1), obj_solidtop, 0, 0) &amp;&amp; (!collision_rectangle(bbox_left, (bbox_bottom - 4), bbox_right, (bbox_bottom - 4), obj_solidtop, 0, 0))) || (collision_rectangle(bbox_left, (bbox_bottom - 1), bbox_right, (bbox_bottom + 1), obj_physicssolid, 0, 0) &amp;&amp; (!collision_rectangle(bbox_left, (bbox_bottom - 4), bbox_right, (bbox_bottom - 4), obj_physicssolid, 0, 0))))
{
    gravity = 0
    if (vspeed &gt; 0)
    {
        if (bouncy == 1)
        {
            if (vspeed &gt; 0.5)
                vspeed = ((-vspeed) / 2)
            else
            {
                vspeed = 0
                bouncy = 0
            }
        }
        else
        {
            vspeed = 0
            event_user(6)
        }
        col_one_top = collision_rectangle(bbox_left, (bbox_bottom + 1), bbox_right, (bbox_bottom + 1), obj_onewaygate_top, 0, 0)
        if col_one_top
        {
            with (col_one_top)
            {
                rot = 1
                event_user(0)
            }
        }
    }
}
else if (modo_lava == 1)
{
    hspeed = 0
    gravity = 0.02
    if (vspeed &gt; 0.03)
        vspeed = 0.03
}
else if (!swimming)
{
    if (collision_rectangle(bbox_right, (bbox_top + 1), (bbox_right + 2), (bbox_bottom - 4), obj_solid, 0, 0) || collision_rectangle((bbox_left - 2), (bbox_top + 1), bbox_left, (bbox_bottom - 4), obj_solid, 0, 0))
    {
        gravity = 0.2
        if (vspeed &gt; 3)
            vspeed = 3
    }
    else
    {
        gravity = 0.2
        if (vspeed &gt; 4)
            vspeed = 4
    }
}
else if (swimming == 1)
{
    gravity = 0.02
    if (vspeed &gt; 1)
        vspeed = 1
}
if (vspeed &lt; 0)
{
    solidphy = collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_solidphy, 1, 0)
    if (collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_solid, 1, 0) || collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_hurtsolid2, 1, 0) || (solidphy &amp;&amp; mytop != obj_lighting &amp;&amp; solidphy.id != mytop.id) || collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_bullebill_base, 1, 0) || collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_onewaygate_bottom, 1, 0))
    {
        while (collision_rectangle(bbox_left, (bbox_top + 1), bbox_right, (bbox_top + 1), obj_solid, 1, 0) &amp;&amp; (!place_meeting(x, y, obj_solid)))
            y++
        while (collision_rectangle(bbox_left, (bbox_top + 1), bbox_right, (bbox_top + 1), obj_hurtsolid2, 1, 0) &amp;&amp; (!place_meeting(x, y, obj_hurtsolid2)))
            y++
        while (collision_rectangle(bbox_left, (bbox_top + 1), bbox_right, (bbox_top + 1), obj_solidphy, 1, 0) &amp;&amp; (!place_meeting(x, y, obj_solidphy)))
            y++
        col_one_bottom = collision_rectangle((bbox_left + 1), ((bbox_top + vspeed) - 1), (bbox_right - 1), (bbox_top - 1), obj_onewaygate_bottom, 1, 0)
        if col_one_bottom
        {
            with (col_one_bottom)
            {
                rot = 1
                event_user(0)
            }
        }
        block = collision_rectangle(bbox_left, (bbox_top - 2), bbox_right, (bbox_top - 1), obj_blockparent, 0, 0)
        if (block &amp;&amp; (object_get_parent(object_index) == 195 || object_get_parent(object_index) == 197))
        {
            if (block.ready == 0)
            {
                with (block)
                    event_user(2)
            }
        }
        vspeed = 0
        event_user(6)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var solidphy_right, solidphy_left, col_one_left, col_one_right, mi_solidphy_right, mi_solidphy_left;
solidphy_right = collision_rectangle(bbox_right, (bbox_top + 1), (bbox_right + 1), (bbox_bottom - 4), obj_solidphy, 0, 0)
solidphy_left = collision_rectangle((bbox_left - 1), (bbox_top + 1), bbox_left, (bbox_bottom - 4), obj_solidphy, 0, 0)
if ((hspeed &gt; 0 &amp;&amp; collision_rectangle(bbox_right, (bbox_top + 1), (bbox_right + 1), (bbox_bottom - 4), obj_solid, 0, 0)) || (hspeed &lt; 0 &amp;&amp; collision_rectangle((bbox_left - 1), (bbox_top + 1), bbox_left, (bbox_bottom - 4), obj_solid, 0, 0)) || (hspeed &gt; 0 &amp;&amp; collision_rectangle(bbox_right, (bbox_top + 1), (bbox_right + 1), (bbox_bottom - 4), obj_physicssolid, 0, 0)) || (hspeed &lt; 0 &amp;&amp; collision_rectangle((bbox_left - 1), (bbox_top + 1), bbox_left, (bbox_bottom - 4), obj_physicssolid, 0, 0)) || (hspeed &gt; 0 &amp;&amp; solidphy_right &amp;&amp; ((mytop != 0 &amp;&amp; solidphy_right.id != mytop) || mytop == 0)) || (hspeed &lt; 0 &amp;&amp; solidphy_left &amp;&amp; ((mytop != 0 &amp;&amp; solidphy_left.id != mytop) || mytop == 0)) || (hspeed &gt; 0 &amp;&amp; collision_rectangle(bbox_right, (bbox_top + 1), (bbox_right + 1), (bbox_bottom - 4), obj_helmet, 0, 0)) || (hspeed &lt; 0 &amp;&amp; collision_rectangle((bbox_left - 1), (bbox_top + 1), bbox_left, (bbox_bottom - 4), obj_helmet, 0, 0)) || (hspeed &gt; 0 &amp;&amp; collision_rectangle(bbox_right, (bbox_top + 1), (bbox_right + 1), (bbox_bottom - 4), obj_bullebill_base, 0, 0)) || (hspeed &lt; 0 &amp;&amp; collision_rectangle((bbox_left - 1), (bbox_top + 1), bbox_left, (bbox_bottom - 4), obj_bullebill_base, 0, 0)) || (hspeed &gt; 0 &amp;&amp; collision_rectangle(bbox_right, (bbox_top + 1), (bbox_right + 1), (bbox_bottom - 4), obj_onewaygate_left, 0, 0)) || (hspeed &lt; 0 &amp;&amp; collision_rectangle((bbox_left - 1), (bbox_top + 1), bbox_left, (bbox_bottom - 4), obj_onewaygate_right, 0, 0)))
{
    col_one_left = collision_rectangle(bbox_right, (bbox_top + 1), (bbox_right + 1), (bbox_bottom - 4), obj_onewaygate_left, 0, 0)
    col_one_right = collision_rectangle((bbox_left - 1), (bbox_top + 1), bbox_left, (bbox_bottom - 4), obj_onewaygate_right, 0, 0)
    if (hspeed &gt; 0 &amp;&amp; col_one_left)
    {
        with (col_one_left)
        {
            rot = 1
            event_user(0)
        }
    }
    if (hspeed &lt; 0 &amp;&amp; col_one_right)
    {
        with (col_one_right)
        {
            rot = 1
            event_user(0)
        }
    }
    hspeed = 0
    event_user(6)
    while collision_rectangle(bbox_right, (bbox_top + 4), bbox_right, (bbox_bottom - 4), obj_solid, 1, 0)
        x--
    while collision_rectangle(bbox_left, (bbox_top + 4), bbox_left, (bbox_bottom - 4), obj_solid, 1, 0)
        x++
    while collision_rectangle(bbox_right, (bbox_top + 4), bbox_right, (bbox_bottom - 4), obj_physicssolid, 1, 0)
        x--
    while collision_rectangle(bbox_left, (bbox_top + 4), bbox_left, (bbox_bottom - 4), obj_physicssolid, 1, 0)
        x++
    mi_solidphy_right = collision_rectangle(bbox_right, (bbox_top + 4), bbox_right, (bbox_bottom - 4), obj_solidphy, 1, 0)
    mi_solidphy_left = collision_rectangle(bbox_left, (bbox_top + 4), bbox_left, (bbox_bottom - 4), obj_solidphy, 1, 0)
    if (mi_solidphy_right &amp;&amp; mi_solidphy_right.id != mytop)
        x--
    if (mi_solidphy_left &amp;&amp; mi_solidphy_left.id != mytop)
        x++
    while collision_rectangle(bbox_right, (bbox_top + 4), bbox_right, (bbox_bottom - 4), obj_bullebill_base, 1, 0)
        x--
    while collision_rectangle(bbox_left, (bbox_top + 4), bbox_left, (bbox_bottom - 4), obj_bullebill_base, 1, 0)
        x++
    while collision_rectangle(bbox_right, (bbox_top + 4), bbox_right, (bbox_bottom - 4), obj_onewaygate_left, 1, 0)
        x--
    while collision_rectangle(bbox_left, (bbox_top + 4), bbox_left, (bbox_bottom - 4), obj_onewaygate_right, 1, 0)
        x++
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check(global.abajo)
{
    if collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, obj_solid, 0, 0)
    {
        inwall = 1
        hspeed = 0
    }
    hspeed = (1 * obj_mario.direct)
    inmune = 1
    alarm[1] = 15
    obj_mario.isduckhold = 0
}
else if (keyboard_check(global.arriba) &amp;&amp; global.apariencia == 2)
{
    explode = 1
    audio_play_sound(scr_snd_kick(), 0, false)
    with (obj_mario)
        event_user(7)
    obj_mario.stompstyle = 0
    with (instance_create((x + 8), (y - 2), obj_smoke))
        sprite_index = spr_spinthump
    if (!collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, obj_solid, 0, 0))
    {
        if (obj_mario.hspeed == 0)
            hspeed = 0
        else
            hspeed = (obj_mario.direct / 2)
        if (global.bg_level == "underwater" || (global.modo_noche == 1 &amp;&amp; global.bg_level == "airship") || (global.modo_noche == 1 &amp;&amp; global.bg_level == "sky") || (instance_exists(obj_lava_water) &amp;&amp; y &gt; (obj_lava_water.y + 16) &amp;&amp; global.bg_level == "forest" &amp;&amp; global.modo_noche == 0))
        {
            vspeed = -2.4
            swimming = 1
        }
        else
            vspeed = -7
    }
    else
        inwall = 1
    inmune = 1
    alarm[1] = 15
    obj_mario.isduckhold = 0
}
else
{
    explode = 1
    if (global.apariencia == 3)
        audio_play_sound(choose(477, 478), 0, false)
    else
    {
        audio_play_sound(scr_snd_kick(), 0, false)
        with (instance_create((x + 8), (y - 2), obj_smoke))
            sprite_index = spr_spinthump
    }
    with (obj_mario)
        event_user(7)
    obj_mario.stompstyle = 0
    y += 1
    if (!collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, obj_solid, 0, 0))
    {
        if (global.bg_level == "underwater" || (global.modo_noche == 1 &amp;&amp; global.bg_level == "airship") || (global.modo_noche == 1 &amp;&amp; global.bg_level == "sky") || (instance_exists(obj_lava_water) &amp;&amp; y &gt; (obj_lava_water.y + 16) &amp;&amp; global.bg_level == "forest" &amp;&amp; global.modo_noche == 0))
        {
            vspeed = -0.2
            swimming = 1
        }
        else
            vspeed = -1.2
        if (global.bg_level == "underwater" || (global.modo_noche == 1 &amp;&amp; global.bg_level == "airship") || (global.modo_noche == 1 &amp;&amp; global.bg_level == "sky") || (instance_exists(obj_lava_water) &amp;&amp; y &gt; (obj_lava_water.y + 16) &amp;&amp; global.bg_level == "forest" &amp;&amp; global.modo_noche == 0))
            hspeed = ((1 + abs(obj_mario.hspeed)) * sign(obj_mario.direct))
        else
            hspeed = ((3 + abs(obj_mario.hspeed)) * sign(obj_mario.direct))
    }
    else
        inwall = 1
    inmune = 1
    alarm[1] = 15
    obj_mario.isduckhold = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index, image_index, round(x), y, 1, 1, 0, c_white, 1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
