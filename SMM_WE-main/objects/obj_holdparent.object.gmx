<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_spring</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_physicsparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0
held = 0
bouncy = 0
direct = 1
big = 0
modo_lava = 0
swimming = 0
inwall = 0
shake = 0
inmune = 0
spin_x = 0
direct = 1
kickme = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (held == 1)
{
    with (obj_mario)
    {
        holding = 0
        isduckhold = 0
    }
    with (obj_player_warp)
        holding = 0
    with (obj_doormario)
        holding = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>inmune = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>kickme = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_mario)
{
    if (obj_mario.stompstyle == 1 || obj_mario.helice_fly == 1 || obj_mario.helice_fly == 3)
    {
        if (shake &gt; 4)
            shake = 0
        switch shake
        {
            case 0:
                spin_x = 10
                depth = -7
                break
            case 1:
                spin_x = 2
                depth = -7
                break
            case 2:
                spin_x = -10
                depth = -7
                break
            case 3:
                spin_x = -2
                depth = -10
                break
            case 4:
                spin_x = 2
                depth = -10
                break
        }

        if (shake == 4)
            shake = 0
        else
            shake++
        alarm[0] = 1.6
    }
    else if (obj_mario.helice_fly == 2)
    {
        switch shake
        {
            case 0:
                spin_x = 10
                depth = -7
                break
            case 1:
                spin_x = 8
                depth = -7
                break
            case 2:
                spin_x = 6
                depth = -7
                break
            case 3:
                spin_x = 4
                depth = -7
                break
            case 4:
                spin_x = 2
                depth = -7
                break
            case 5:
                spin_x = 0
                depth = -7
                break
            case 6:
                spin_x = -2
                depth = -7
                break
            case 7:
                spin_x = -4
                depth = -7
                break
            case 8:
                spin_x = -6
                depth = -7
                break
            case 9:
                spin_x = -8
                depth = -7
                break
            case 10:
                spin_x = -10
                depth = -7
                break
            case 11:
                spin_x = -8
                depth = -10
                break
            case 12:
                spin_x = -6
                depth = -10
                break
            case 13:
                spin_x = -4
                depth = -10
                break
            case 14:
                spin_x = -2
                depth = -10
                break
            case 15:
                spin_x = 0
                depth = -10
                break
            case 16:
                spin_x = 2
                depth = -10
                break
            case 17:
                spin_x = 4
                depth = -10
                break
            case 18:
                spin_x = 6
                depth = -10
                break
            case 19:
                spin_x = 8
                depth = -10
                break
        }

        if (shake == 19)
            shake = 0
        else
            shake++
        alarm[0] = 2.6
    }
    else if (obj_mario.airspin == 1)
    {
        if (shake &gt; 7)
            shake = 0
        switch shake
        {
            case 0:
                spin_x = 10
                depth = -7
                break
            case 1:
                spin_x = -2
                depth = -7
                break
            case 2:
                spin_x = 0
                depth = -7
                break
            case 3:
                spin_x = -10
                depth = -7
                break
            case 4:
                spin_x = -2
                depth = -7
                break
            case 5:
                spin_x = 0
                depth = -10
                break
            case 6:
                spin_x = 2
                depth = -10
                break
            case 7:
                spin_x = 10
                depth = -10
                break
        }

        if (shake == 7)
            shake = 0
        else
            shake++
        alarm[0] = 1.6
    }
}
else
{
    shake = 0
    spin_x = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var lava_lift, check, phy_check, spd;
if (held == 1)
{
    swimming = 0
    vspeed = 0
    if instance_exists(obj_mario)
    {
        if (obj_mario.helice_fly == 4 || obj_mario.stuntime &gt; 0 || (global.powerup == -82 &amp;&amp; (!instance_exists(obj_mario_transform2))))
        {
            obj_mario.holding = 0
            y--
            held = 0
            depth = 0
            shake = 0
            alarm[0] = -1
            if (collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, obj_solid, 0, 0) || collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, obj_bullebill_base, 0, 0) || collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, obj_physicssolid, 0, 0))
            {
                inwall = 1
                hspeed = 0
            }
            if (obj_mario.hspeed == 0)
                hspeed = (1 * obj_mario.direct)
            else
                hspeed = (obj_mario.hspeed / 2)
            inmune = 1
            alarm[3] = 15
            obj_mario.isduckhold = 0
            exit
        }
        if (obj_mario.holding == 2 &amp;&amp; (obj_mario.stompstyle == 1 || (obj_mario.helice_fly &gt; 0 &amp;&amp; obj_mario.helice_fly &lt; 4)))
        {
            if (alarm[0] == -1)
                alarm[0] = 1
            x = ((obj_mario.x - 8) + spin_x)
        }
        else if (obj_mario.airspin == 1 &amp;&amp; obj_mario.holding == 2)
        {
            if (alarm[0] == -1)
                alarm[0] = 1
            x = ((obj_mario.x - 8) + spin_x)
        }
        else
        {
            if (global.apariencia == 3)
            {
                depth = -10
                x = ((obj_mario.x - 8) + (10 * obj_mario.direct))
            }
            else if (obj_mario.turning == 1)
            {
                depth = -10
                x = (obj_mario.x - 8)
            }
            else
            {
                depth = -7
                x = ((obj_mario.x - 8) + (11 * obj_mario.direct))
            }
            shake = 0
            alarm[0] = -1
            if (keyboard_check(global.abajo) &amp;&amp; obj_mario.vspeed == 0 &amp;&amp; obj_mario.gravity == 0 &amp;&amp; global.apariencia == 2)
                y = (obj_mario.y + 16)
        }
        if ((obj_mario.y + 4) &lt; (view_yview[0] - 20))
            y = (view_yview[0] - 20)
        else if (global.powerup == 0)
        {
            if (global.apariencia == 3)
                y = (obj_mario.y + 12)
            else
                y = (obj_mario.y + 15)
        }
        else if (global.apariencia == 3)
            y = (obj_mario.y + 4)
        else
            y = (obj_mario.y + 12)
        if keyboard_check(global.lanzar_agarrar)
        {
            if (keyboard_check(global.abajo) &amp;&amp; obj_mario.state &lt; 2 &amp;&amp; obj_mario.stompstyle == 0 &amp;&amp; global.apariencia != 3 &amp;&amp; obj_mario.helmet == 0 &amp;&amp; (object_index == obj_spiny_empty || object_index == obj_shell_empty))
                obj_mario.holding = 0
            else
                obj_mario.holding = 2
            direct = 1
        }
        else if (obj_mario.disablecontrols == 0 &amp;&amp; global.key_br == 0)
        {
            obj_mario.holding = 0
            y--
            held = 0
            depth = 0
            shake = 0
            alarm[0] = -1
            event_user(2)
        }
        visible = true
    }
    else if instance_exists(obj_player_warp)
    {
        obj_player_warp.myitem = sprite_index
        global.warp_item = sprite_index
        if (global.apariencia == 3)
            x = ((obj_player_warp.x - 8) + (10 * obj_player_warp.direct))
        else
            x = ((obj_player_warp.x - 8) + (11 * obj_player_warp.direct))
        if (global.powerup == 0)
        {
            if (global.apariencia == 3)
                y = (obj_player_warp.y + 12)
            else
                y = (obj_player_warp.y + 15)
        }
        else if (global.apariencia == 3)
            y = (obj_player_warp.y + 4)
        else
            y = (obj_player_warp.y + 12)
        obj_player_warp.holding = 2
        visible = false
    }
    else if instance_exists(obj_doormario)
    {
        obj_doormario.myitem = sprite_index
        if (global.apariencia == 3)
            x = ((obj_doormario.x - 8) + (10 * obj_doormario.direct))
        else
            x = ((obj_doormario.x - 8) + (11 * obj_doormario.direct))
        if (global.powerup == 0)
        {
            if (global.apariencia == 3)
                y = (obj_doormario.y + 12)
            else
                y = (obj_doormario.y + 15)
        }
        else if (global.apariencia == 3)
            y = (obj_doormario.y + 4)
        else
            y = (obj_doormario.y + 12)
        obj_doormario.holding = 2
        visible = false
    }
    else if instance_exists(obj_doormario_exit)
    {
        obj_doormario_exit.myitem = sprite_index
        if (global.apariencia == 3)
            x = ((obj_doormario_exit.x - 8) + (10 * obj_doormario_exit.direct))
        else
            x = ((obj_doormario_exit.x - 8) + (11 * obj_doormario_exit.direct))
        if (global.powerup == 0)
        {
            if (global.apariencia == 3)
                y = (obj_doormario_exit.y + 12)
            else
                y = (obj_doormario_exit.y + 15)
        }
        else if (global.apariencia == 3)
            y = (obj_doormario_exit.y + 4)
        else
            y = (obj_doormario_exit.y + 12)
        obj_doormario_exit.holding = 2
        visible = false
    }
    else if (global.warp_item == -4)
        held = 0
}
else
{
    lava_lift = collision_rectangle(bbox_left, (bbox_bottom - 3), bbox_right, ((bbox_bottom + 4) + vspeed), obj_platform_parent, 0, 0)
    if (lava_lift &amp;&amp; vspeed &gt;= 0)
    {
        check = collision_rectangle(bbox_left, (bbox_bottom - 2), bbox_right, ((bbox_bottom + 2) + vspeed), obj_solidtop, 0, 0)
        phy_check = collision_rectangle(bbox_left, (bbox_bottom - 2), bbox_right, ((bbox_bottom + 2) + vspeed), obj_physicssolid, 0, 0)
        if ((check &amp;&amp; check != lava_lift) || phy_check)
            exit
        y = (lava_lift.bbox_top - (sprite_get_bbox_bottom(sprite_index) - sprite_get_yoffset(sprite_index)))
        spd = lava_lift.hspeed
        if ((lava_lift.hspeed &gt; 0 &amp;&amp; (!collision_rectangle(((bbox_right + 1) + spd), bbox_top, ((bbox_right + 1) + spd), (bbox_bottom - 1), obj_solid, 0, 0))) || (lava_lift.hspeed &gt; 0 &amp;&amp; (!collision_rectangle(((bbox_right + 1) + spd), bbox_top, ((bbox_right + 1) + spd), (bbox_bottom - 1), obj_physicssolid, 0, 0))) || (lava_lift.hspeed &gt; 0 &amp;&amp; (!collision_rectangle(((bbox_right + 1) + spd), bbox_top, ((bbox_right + 1) + spd), (bbox_bottom - 1), obj_bullebill_base, 0, 0))) || (lava_lift.hspeed &gt; 0 &amp;&amp; (!collision_rectangle(((bbox_right + 1) + spd), bbox_top, ((bbox_right + 1) + spd), (bbox_bottom - 1), obj_onewaygate_left, 0, 0))) || (lava_lift.hspeed &lt; 0 &amp;&amp; (!collision_rectangle(((bbox_left - 1) + spd), bbox_top, ((bbox_left - 1) + spd), (bbox_bottom - 1), obj_solid, 0, 0))) || (lava_lift.hspeed &lt; 0 &amp;&amp; (!collision_rectangle(((bbox_left - 1) + spd), bbox_top, ((bbox_left - 1) + spd), (bbox_bottom - 1), obj_physicssolid, 0, 0))) || (lava_lift.hspeed &lt; 0 &amp;&amp; (!collision_rectangle(((bbox_left - 1) + spd), bbox_top, ((bbox_left - 1) + spd), (bbox_bottom - 1), obj_bullebill_base, 0, 0))) || (lava_lift.hspeed &lt; 0 &amp;&amp; (!collision_rectangle(((bbox_left - 1) + spd), bbox_top, ((bbox_left - 1) + spd), (bbox_bottom - 1), obj_onewaygate_right, 0, 0))))
            x += lava_lift.hspeed
        if (collision_rectangle(bbox_right, (bbox_top + 4), (bbox_right + 1), (bbox_bottom - 1), obj_solid, 0, 0) || collision_rectangle(bbox_right, (bbox_top + 4), (bbox_right + 1), (bbox_bottom - 1), obj_physicssolid, 0, 0) || collision_rectangle(bbox_right, (bbox_top + 4), (bbox_right + 1), (bbox_bottom - 1), obj_onewaygate_left, 0, 0) || collision_rectangle(bbox_right, (bbox_top + 4), (bbox_right + 1), (bbox_bottom - 1), obj_bullebill_base, 0, 0))
            x--
        else if (collision_rectangle((bbox_left - 1), (bbox_top + 4), bbox_left, (bbox_bottom - 1), obj_solid, 0, 0) || collision_rectangle((bbox_left - 1), (bbox_top + 4), bbox_left, (bbox_bottom - 1), obj_physicssolid, 0, 0) || collision_rectangle((bbox_left - 1), (bbox_top + 4), bbox_left, (bbox_bottom - 1), obj_onewaygate_right, 0, 0) || collision_rectangle((bbox_left - 1), (bbox_top + 4), bbox_left, (bbox_bottom - 1), obj_bullebill_base, 0, 0))
            x++
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var col_mario_left, col_mario_right;
if (y &lt; -20 &amp;&amp; vspeed &lt; 0)
    y = -20
if (global.bg_level == "underwater" || (global.modo_noche == 1 &amp;&amp; global.bg_level == "sky") || (global.modo_noche == 1 &amp;&amp; global.bg_level == "airship") || (instance_exists(obj_lava_water) &amp;&amp; y &gt; (obj_lava_water.y + 16) &amp;&amp; ((global.bg_level == "forest" &amp;&amp; global.modo_noche == 0) || global.bg_level == "beach")))
    swimming = 1
else
    swimming = 0
if (held == 0)
{
    col_mario_left = collision_rectangle((bbox_left - 6), (bbox_top + 8), bbox_left, (bbox_bottom - 4), obj_mario, 0, 0)
    col_mario_right = collision_rectangle(bbox_right, (bbox_top + 8), (bbox_right + 6), (bbox_bottom - 4), obj_mario, 0, 0)
    if (instance_exists(obj_mario) &amp;&amp; ((col_mario_left &amp;&amp; obj_mario.direct == 1) || (col_mario_right &amp;&amp; obj_mario.direct == -1)) &amp;&amp; object_index != obj_shell &amp;&amp; object_index != obj_shell_empty &amp;&amp; object_index != obj_spiny_empty &amp;&amp; obj_mario.bbox_bottom &gt; (bbox_top + 5) &amp;&amp; obj_mario.bbox_top &lt; (bbox_bottom - 4) &amp;&amp; scr_canhold() &amp;&amp; sprite_height &lt;= 30 &amp;&amp; (object_index != obj_spring || (object_index == obj_spring &amp;&amp; ready == 0 &amp;&amp; ready2 == 0)) &amp;&amp; inmune == 0)
    {
        obj_mario.holding = 2
        if (global.apariencia == 2 &amp;&amp; obj_mario.isduck == 1)
            obj_mario.isduckhold = 1
        if (global.apariencia == 3)
        {
            audio_play_sound(choose(475, 476), 0, false)
            with (other.id)
            {
                triple_jump = 0
                triple_count = 0
            }
        }
        held = 1
        depth = -7
        gravity = 0
        speed = 0
    }
    if (collision_rectangle(bbox_left, (bbox_top - 8), bbox_right, (bbox_top + 7), obj_mario, 0, 0) &amp;&amp; image_speed != 0 &amp;&amp; inmune == 0 &amp;&amp; vspeed != 0 &amp;&amp; hspeed == 0 &amp;&amp; object_index != obj_bobomb_hold &amp;&amp; object_index != obj_galoomba_hold &amp;&amp; object_index != obj_galoomba_hold2)
    {
        hspeed = (max(0, (abs(hspeed) - 0.075)) * sign(hspeed))
        if (abs(hspeed) &lt; 0.075)
            hspeed = 0
        obj_mario.x += hspeed
        if (object_index == obj_spring)
            obj_mario.y = ((y + (image_index * 4)) - 32)
        else
            obj_mario.y = ceil((bbox_top - (31 - vspeed)))
    }
    if instance_exists(obj_mario)
    {
        if (inwall == 0)
        {
            event_inherited()
            if (gravity == 0)
            {
                if (swimming == 0)
                {
                    hspeed = (max(0, (abs(hspeed) - 0.085)) * sign(hspeed))
                    if (abs(hspeed) &lt; 0.085)
                        hspeed = 0
                }
                else if (swimming == 1)
                {
                    hspeed = (max(0, (abs(hspeed) - 0.085)) * sign(hspeed))
                    if (abs(hspeed) &lt; 0.085)
                        hspeed = 0
                }
            }
            if ((collision_rectangle(bbox_left, (bbox_top + 4), bbox_right, (bbox_bottom - 1), obj_solid, 0, 0) || collision_rectangle(bbox_left, (bbox_top + 4), bbox_right, (bbox_bottom - 1), obj_hurtsolid2, 0, 0) || collision_rectangle(bbox_left, (bbox_top + 4), bbox_right, (bbox_bottom - 1), obj_bullebill_base, 0, 0) || collision_rectangle(bbox_left, (bbox_top + 4), bbox_right, (bbox_bottom - 1), obj_solidphy, 0, 0)) &amp;&amp; vspeed &lt; 0)
            {
                hspeed = 0
                inwall = 1
            }
        }
        else
        {
            if (object_index == obj_galoomba_hold || object_index == obj_bobomb_hold)
                direct = (-direct)
            while collision_rectangle(bbox_right, (bbox_top + 4), bbox_right, (bbox_bottom - 4), obj_solid, 1, 0)
                x--
            while collision_rectangle(bbox_left, (bbox_top + 4), bbox_left, (bbox_bottom - 4), obj_solid, 1, 0)
                x++
            while collision_rectangle(bbox_right, (bbox_top + 4), bbox_right, (bbox_bottom - 4), obj_onewaygate_left, 1, 0)
                x--
            while collision_rectangle(bbox_left, (bbox_top + 4), bbox_left, (bbox_bottom - 4), obj_onewaygate_right, 1, 0)
                x++
            while collision_rectangle(bbox_right, (bbox_top + 4), bbox_right, (bbox_bottom - 4), obj_bullebill_base, 1, 0)
                x--
            while collision_rectangle(bbox_left, (bbox_top + 4), bbox_left, (bbox_bottom - 4), obj_bullebill_base, 1, 0)
                x++
            if ((!collision_rectangle(bbox_left, (bbox_top + 4), bbox_right, (bbox_bottom - 1), obj_solid, 0, 0)) &amp;&amp; (!collision_rectangle(bbox_left, (bbox_top + 4), bbox_right, (bbox_bottom - 1), obj_hurtsolid2, 0, 0)) &amp;&amp; (!collision_rectangle(bbox_left, (bbox_top + 4), bbox_right, (bbox_bottom - 1), obj_bullebill_base, 0, 0)) &amp;&amp; (!collision_rectangle(bbox_left, (bbox_top + 4), bbox_right, (bbox_bottom - 1), obj_solidphy, 0, 0)) &amp;&amp; (!collision_rectangle(bbox_left, (bbox_top + 4), bbox_right, (bbox_bottom - 1), obj_onewaygate_left, 0, 0)) &amp;&amp; (!collision_rectangle(bbox_left, (bbox_top + 4), bbox_right, (bbox_bottom - 1), obj_onewaygate_right, 0, 0)))
                inwall = 0
        }
    }
    else if instance_exists(obj_deadmario)
    {
        vspeed = 0
        gravity = 0
    }
    else
        event_inherited()
    if (instance_exists(obj_lava_water) &amp;&amp; (bbox_bottom - 8) &gt; (obj_lava_water.y - 12) &amp;&amp; global.bg_level == "castle" &amp;&amp; object_index != obj_bobomb_hold &amp;&amp; modo_lava == 0)
    {
        if (global.apariencia != 0)
        {
            if (object_index == obj_shell)
                instance_create(x, (obj_lava_water.y - 26), obj_splash_lava)
            else
                instance_create((x + 8), (obj_lava_water.y - 26), obj_splash_lava)
        }
        modo_lava = 1
    }
    else if (instance_exists(obj_lava_water) &amp;&amp; (bbox_bottom - 8) &gt; (obj_lava_water.y - 12) &amp;&amp; global.bg_level == "forest" &amp;&amp; global.modo_noche == 1 &amp;&amp; object_index != obj_bobomb_hold &amp;&amp; modo_lava == 0)
    {
        if (global.apariencia != 0)
        {
            if (object_index == obj_shell)
                instance_create(x, (obj_lava_water.y - 26), obj_splash_posion)
            else
                instance_create((x + 8), (obj_lava_water.y - 26), obj_splash_posion)
        }
        modo_lava = 1
    }
    else if (y &gt; room_height &amp;&amp; object_index != obj_cap_mario &amp;&amp; object_index != obj_helmet &amp;&amp; object_index != obj_helmet_spiny &amp;&amp; held == 0)
        instance_destroy()
    if (instance_exists(obj_lava_water) &amp;&amp; (y + 8) &lt;= (obj_lava_water.y - 12) &amp;&amp; obj_lava_water.vspeed &gt; 0 &amp;&amp; (modo_lava == 1 || swimming == 1))
        y = (obj_lava_water.y - 20)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_blockparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (held == 0 &amp;&amp; other.vspeed &lt; 0 &amp;&amp; kickme == 1)
{
    if (global.bg_level == "underwater" || (global.modo_noche == 1 &amp;&amp; global.bg_level == "airship") || (global.modo_noche == 1 &amp;&amp; global.bg_level == "sky"))
        vspeed = -1.8
    else
        vspeed = -3
    y--
    kickme = 0
    alarm[2] = 4
}
else if (held == 0 &amp;&amp; other.vspeed &lt; 0 &amp;&amp; vspeed &lt; 0)
    event_user(1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_mario">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var alturabo;
if (held == 0)
{
    if (object_index == obj_bobomb_hold)
        alturabo = 12
    else
        alturabo = 5
    if (other.bbox_bottom &lt; ((bbox_top - vspeed) + alturabo) &amp;&amp; other.vspeed &gt; 0)
        event_user(1)
    else if (scr_canhold() == 0 &amp;&amp; inmune == 0 &amp;&amp; (object_index == obj_bobomb_hold || object_index == obj_galoomba_hold || object_index == obj_galoomba_hold2 || object_index == obj_mechakoopa_held))
    {
        if (!audio_is_playing(scr_snd_kick()))
            audio_play_sound(scr_snd_kick(), 0, false)
        if (!instance_exists(obj_spinthump))
        {
            with (instance_create(other.x, (other.y + 22), obj_spinthump))
            {
                image_xscale = 0.5
                image_yscale = 0.5
            }
        }
        if ((other.bbox_left + (bbox_right / 2)) &gt; (bbox_left + (bbox_right / 2)))
        {
            hspeed = (other.hspeed - (1 - swimming))
            direct = -1
        }
        else
        {
            hspeed = (other.hspeed + (1 - swimming))
            direct = 1
        }
        vspeed = (-0.5 + swimming)
        inmune = 1
        alarm[3] = 15
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (held == 1)
{
    with (obj_mario)
        holding = 0
    with (obj_doormario)
        holding = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vspeed = (-(3 - (1.5 * swimming)))
if (other.hspeed == 0)
{
    if (((other.bbox_left + other.bbox_right) / 2) &lt; ((bbox_left + bbox_right) / 2))
        hspeed = 0.6
    else if (((other.bbox_left + other.bbox_right) / 2) &gt; ((bbox_left + bbox_right) / 2))
        hspeed = -0.6
}
else if (other.hspeed &gt; 0)
    hspeed = 0.6
else if (other.hspeed &lt; 0)
    hspeed = -0.6
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var semisolid, physolid, col_one_top, col_one_bottom, block;
if (vspeed &gt;= 0)
{
    semisolid = collision_rectangle(bbox_left, (bbox_bottom - 1), bbox_right, (bbox_bottom + vspeed), obj_solidtop, 0, 0)
    physolid = collision_rectangle(bbox_left, (bbox_bottom - 1), bbox_right, (bbox_bottom + vspeed), obj_physicssolid, 0, 0)
    if (semisolid &amp;&amp; bbox_bottom &lt; (semisolid.yprevious + 5))
        y = (semisolid.bbox_top - (sprite_get_bbox_bottom(sprite_index) - sprite_get_yoffset(sprite_index)))
    if (physolid &amp;&amp; bbox_bottom &lt; (physolid.yprevious + 5))
        y = (physolid.bbox_top - (sprite_get_bbox_bottom(sprite_index) - sprite_get_yoffset(sprite_index)))
    if (vspeed &gt; 4)
        vspeed = 4
}
if ((collision_rectangle(bbox_left, (bbox_bottom - 1), bbox_right, (bbox_bottom + 1), obj_solidtop, 0, 0) &amp;&amp; (!collision_rectangle(bbox_left, (bbox_bottom - 4), bbox_right, (bbox_bottom - 4), obj_solidtop, 0, 0))) || (collision_rectangle(bbox_left, (bbox_bottom - 1), bbox_right, (bbox_bottom + 1), obj_physicssolid, 0, 0) &amp;&amp; (!collision_rectangle(bbox_left, (bbox_bottom - 4), bbox_right, (bbox_bottom - 4), obj_physicssolid, 0, 0))))
{
    gravity = 0
    if (vspeed &gt; 0)
    {
        if (bouncy == 1)
        {
            if (vspeed &gt; 0.5)
            {
                vspeed = ((-vspeed) / 2)
                hspeed = (max(0, (abs(hspeed) - 0.085)) * sign(hspeed))
            }
            else
            {
                vspeed = 0
                bouncy = 0
            }
        }
        else
            vspeed = 0
        col_one_top = collision_rectangle(bbox_left, (bbox_bottom + 1), bbox_right, (bbox_bottom + 1), obj_onewaygate_top, 0, 0)
        if col_one_top
        {
            with (col_one_top)
            {
                rot = 1
                event_user(0)
            }
        }
    }
}
else if (modo_lava == 1)
{
    hspeed = 0
    gravity = 0.02
    if (vspeed &gt; 0.03)
        vspeed = 0.03
}
else if (!swimming)
{
    gravity = 0.15
    if (vspeed &gt; 4)
        vspeed = 4
}
else if (swimming == 1)
{
    gravity = 0.02
    if (vspeed &gt; 1)
        vspeed = 1
}
if (vspeed &lt; 0)
{
    if (collision_rectangle(bbox_left, (bbox_top - vspeed), bbox_right, bbox_top, obj_solid, 1, 0) || collision_rectangle(bbox_left, (bbox_top - vspeed), bbox_right, bbox_top, obj_physicssolid, 1, 0) || collision_rectangle(bbox_left, (bbox_top - vspeed), bbox_right, bbox_top, obj_solidphy, 1, 0) || collision_rectangle(bbox_left, (bbox_top - vspeed), bbox_right, bbox_top, obj_bullebill_base, 1, 0) || collision_rectangle(bbox_left, (bbox_top - vspeed), bbox_right, bbox_top, obj_onewaygate_bottom, 1, 0))
    {
        while (collision_rectangle(bbox_left, (bbox_top + 1), bbox_right, (bbox_top + 1), obj_solid, 1, 0) &amp;&amp; (!place_meeting(x, y, obj_solid)))
            y++
        while (collision_rectangle(bbox_left, (bbox_top + 1), bbox_right, (bbox_top + 1), obj_physicssolid, 1, 0) &amp;&amp; (!place_meeting(x, y, obj_physicssolid)))
            y++
        while (collision_rectangle(bbox_left, (bbox_top + 1), bbox_right, (bbox_top + 1), obj_solidphy, 1, 0) &amp;&amp; (!place_meeting(x, y, obj_solidphy)))
            y++
        while (collision_rectangle(bbox_left, (bbox_top + 1), bbox_right, (bbox_top + 1), obj_bullebill_base, 1, 0) &amp;&amp; (!place_meeting(x, y, obj_bullebill_base)))
            y++
        col_one_bottom = collision_rectangle((bbox_left + 1), ((bbox_top + vspeed) - 1), (bbox_right - 1), (bbox_top - 1), obj_onewaygate_bottom, 1, 0)
        if col_one_bottom
        {
            with (col_one_bottom)
            {
                rot = 1
                event_user(0)
            }
        }
        block = collision_rectangle(bbox_left, (bbox_top - 2), bbox_right, (bbox_top - 1), obj_blockparent, 0, 0)
        if (block &amp;&amp; (object_get_parent(object_index) == 195 || object_get_parent(object_index) == 197))
        {
            if (block.ready == 0)
            {
                with (block)
                    event_user(2)
            }
        }
        vspeed = 0
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var col_one_left, col_one_right;
if ((hspeed &gt; 0 &amp;&amp; collision_rectangle(bbox_right, (bbox_top + 1), (bbox_right + 1), (bbox_bottom - 4), obj_solid, 0, 0)) || (hspeed &lt; 0 &amp;&amp; collision_rectangle((bbox_left - 1), (bbox_top + 1), bbox_left, (bbox_bottom - 4), obj_solid, 0, 0)) || (hspeed &gt; 0 &amp;&amp; collision_rectangle(bbox_right, (bbox_top + 1), (bbox_right + 1), (bbox_bottom - 4), obj_physicssolid, 0, 0)) || (hspeed &lt; 0 &amp;&amp; collision_rectangle((bbox_left - 1), (bbox_top + 1), bbox_left, (bbox_bottom - 4), obj_physicssolid, 0, 0)) || (hspeed &gt; 0 &amp;&amp; collision_rectangle(bbox_right, (bbox_top + 1), (bbox_right + 1), (bbox_bottom - 4), obj_solidphy, 0, 0)) || (hspeed &lt; 0 &amp;&amp; collision_rectangle((bbox_left - 1), (bbox_top + 1), bbox_left, (bbox_bottom - 4), obj_solidphy, 0, 0)) || (hspeed &gt; 0 &amp;&amp; collision_rectangle(bbox_right, (bbox_top + 1), (bbox_right + 1), (bbox_bottom - 4), obj_bullebill_base, 0, 0)) || (hspeed &lt; 0 &amp;&amp; collision_rectangle((bbox_left - 1), (bbox_top + 1), bbox_left, (bbox_bottom - 4), obj_bullebill_base, 0, 0)) || (hspeed &gt; 0 &amp;&amp; collision_rectangle(bbox_right, (bbox_top + 1), (bbox_right + 1), (bbox_bottom - 4), obj_onewaygate_left, 0, 0)) || (hspeed &lt; 0 &amp;&amp; collision_rectangle((bbox_left - 1), (bbox_top + 1), bbox_left, (bbox_bottom - 4), obj_onewaygate_right, 0, 0)))
{
    col_one_left = collision_rectangle(bbox_right, (bbox_top + 1), (bbox_right + 1), (bbox_bottom - 4), obj_onewaygate_left, 0, 0)
    col_one_right = collision_rectangle((bbox_left - 1), (bbox_top + 1), bbox_left, (bbox_bottom - 4), obj_onewaygate_right, 0, 0)
    if (hspeed &gt; 0 &amp;&amp; col_one_left)
    {
        with (col_one_left)
        {
            rot = 1
            event_user(0)
        }
    }
    if (hspeed &lt; 0 &amp;&amp; col_one_right)
    {
        with (col_one_right)
        {
            rot = 1
            event_user(0)
        }
    }
    direct = (-direct)
    hspeed = 0
    while collision_rectangle(bbox_right, (bbox_top + 4), bbox_right, (bbox_bottom - 4), obj_solid, 1, 0)
        x--
    while collision_rectangle(bbox_left, (bbox_top + 4), bbox_left, (bbox_bottom - 4), obj_solid, 1, 0)
        x++
    while collision_rectangle(bbox_right, (bbox_top + 4), bbox_right, (bbox_bottom - 4), obj_physicssolid, 1, 0)
        x--
    while collision_rectangle(bbox_left, (bbox_top + 4), bbox_left, (bbox_bottom - 4), obj_physicssolid, 1, 0)
        x++
    while collision_rectangle(bbox_right, (bbox_top + 4), bbox_right, (bbox_bottom - 4), obj_solidphy, 1, 0)
        x--
    while collision_rectangle(bbox_left, (bbox_top + 4), bbox_left, (bbox_bottom - 4), obj_solidphy, 1, 0)
        x++
    while collision_rectangle(bbox_right, (bbox_top + 4), bbox_right, (bbox_bottom - 4), obj_bullebill_base, 1, 0)
        x--
    while collision_rectangle(bbox_left, (bbox_top + 4), bbox_left, (bbox_bottom - 4), obj_bullebill_base, 1, 0)
        x++
    while collision_rectangle(bbox_right, (bbox_top + 4), bbox_right, (bbox_bottom - 4), obj_onewaygate_left, 1, 0)
        x--
    while collision_rectangle(bbox_left, (bbox_top + 4), bbox_left, (bbox_bottom - 4), obj_onewaygate_right, 1, 0)
        x++
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check(global.abajo)
{
    if (collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, obj_solid, 0, 0) || collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, obj_bullebill_base, 0, 0) || collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, obj_muncher, 0, 0))
    {
        inwall = 1
        hspeed = 0
    }
    if (!collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, obj_slopeparent, 1, 0))
    {
        if (obj_mario.hspeed == 0)
            hspeed = (0.7 * obj_mario.direct)
        else
            hspeed = (obj_mario.hspeed / 2)
    }
    else
        vspeed = 0.1
    inmune = 1
    alarm[3] = 15
    obj_mario.isduckhold = 0
}
else if (keyboard_check(global.arriba) &amp;&amp; global.apariencia == 2)
{
    audio_play_sound(scr_snd_kick(), 0, false)
    with (obj_mario)
        event_user(7)
    obj_mario.stompstyle = 0
    with (instance_create((x + 8), (y - 2), obj_smoke))
        sprite_index = spr_spinthump
    if (obj_mario.hspeed == 0)
        hspeed = 0
    else
        hspeed = (obj_mario.direct / 2)
    vspeed = (-(6.125 - (3.5 * swimming)))
    if (collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, obj_solid, 0, 0) || collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, obj_bullebill_base, 0, 0) || collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, obj_muncher, 0, 0))
        inwall = 1
    inmune = 1
    alarm[3] = 15
    obj_mario.isduckhold = 0
}
else
{
    if (global.apariencia == 3)
        audio_play_sound(choose(477, 478, 477), 0, false)
    else
    {
        audio_play_sound(scr_snd_kick(), 0, false)
        with (instance_create((x + 8), (y - 2), obj_smoke))
            sprite_index = spr_spinthump
    }
    with (obj_mario)
        event_user(7)
    obj_mario.stompstyle = 0
    if (obj_mario.helice_fly != 0)
        obj_mario.helice_fly = 5
    y += 1
    bouncy = 1
    if ((!collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, obj_solid, 0, 0)) &amp;&amp; (!collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, obj_bullebill_base, 0, 0)) &amp;&amp; (!collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, obj_physicssolid, 0, 0)))
    {
        vspeed = (-(1.5 - swimming))
        hspeed = (((2 - swimming) + abs(obj_mario.hspeed)) * sign(obj_mario.direct))
    }
    else
        inwall = 1
    inmune = 1
    alarm[3] = 15
    obj_mario.isduckhold = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index, image_index, round(x), y, 1, 1, 0, c_white, 1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
