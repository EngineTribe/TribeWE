<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mario_pballon</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-8</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_mario)
    obj_mario.visible = false
switch global.jugador
{
    case 0:
        sprite_index = spr_mario_pballon
        break
    case 1:
        sprite_index = spr_luigi_pballon
        break
    case 2:
        sprite_index = spr_toad_pballon
        break
    case 3:
        sprite_index = spr_toadette_pballon
        break
}

image_speed = 0
image_index = 0
friction = 0.01
direction = 90
image_angle = 90
angle = 90
inf = 0
ready = 0
time = 10
moving = 0
mov = 0
max_speed = 1
xx = 0
xDiff_h = 0
yDiff_h = 0
fallow = -4
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_stop_sound(snd_pballon_c)
ready = 0
if instance_exists(obj_mario)
{
    if (global.powerup != 0 &amp;&amp; (collision_rectangle(obj_mario.bbox_left, (obj_mario.bbox_top - 16), obj_mario.bbox_right, obj_mario.bbox_top, obj_solid, 1, 0) || collision_rectangle(obj_mario.bbox_left, (obj_mario.bbox_top - 16), obj_mario.bbox_right, obj_mario.bbox_top, obj_physicssolid, 1, 0) || collision_rectangle(obj_mario.bbox_left, (obj_mario.bbox_top - 16), obj_mario.bbox_right, obj_mario.bbox_top, obj_solidphy, 1, 0) || collision_rectangle(obj_mario.bbox_left, (obj_mario.bbox_top - 16), obj_mario.bbox_right, obj_mario.bbox_top, obj_bullebill_base, 1, 0)))
    {
        with (obj_mario)
        {
            if (holding == 2 &amp;&amp; global.apariencia == 2)
            {
                isduck = 1
                isduckhold = 1
            }
            else
                isduck = 1
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch global.jugador
{
    case 0:
        sprite_index = spr_mario_pballon
        break
    case 1:
        sprite_index = spr_luigi_pballon
        break
    case 2:
        sprite_index = spr_toad_pballon
        break
    case 3:
        sprite_index = spr_toadette_pballon
        break
}

if instance_exists(obj_mario)
{
    if (speed == 0)
    {
        if (keyboard_check(global.derecha) || keyboard_check(global.izquierda))
            image_speed = 0.1
        else
        {
            image_speed = 0
            image_index = 0
        }
    }
    else if (ready == 2)
    {
        image_speed = 0
        image_index = 2
    }
    else
        image_speed = 0.15
}
else if instance_exists(obj_player_goal_parent)
{
    if (speed == 0)
    {
        image_speed = 0
        image_index = 0
    }
    else
        image_speed = 0.15
}
if (hspeed &lt; 0 &amp;&amp; (collision_rectangle((bbox_left + hspeed), (bbox_top + 1), (bbox_left + hspeed), (bbox_bottom - 4), obj_solid, 0, 0) || collision_rectangle((bbox_left + hspeed), (bbox_top + 1), (bbox_left + hspeed), (bbox_bottom - 4), obj_physicssolid, 0, 0) || collision_rectangle((bbox_left + hspeed), (bbox_top + 1), (bbox_left + hspeed), (bbox_bottom - 4), obj_bullebill_base, 0, 0) || collision_rectangle((bbox_left + hspeed), (bbox_top + 1), (bbox_left + hspeed), (bbox_bottom - 4), obj_onewaygate_right, 0, 0)))
    x += xx
if (hspeed &gt; 0 &amp;&amp; (collision_rectangle((bbox_right + hspeed), (bbox_top + 1), (bbox_right + hspeed), (bbox_bottom - 4), obj_solid, 0, 0) || collision_rectangle((bbox_right + hspeed), (bbox_top + 1), (bbox_right + hspeed), (bbox_bottom - 4), obj_physicssolid, 0, 0) || collision_rectangle((bbox_right + hspeed), (bbox_top + 1), (bbox_right + hspeed), (bbox_bottom - 4), obj_bullebill_base, 0, 0) || collision_rectangle((bbox_right + hspeed), (bbox_top + 1), (bbox_right + hspeed), (bbox_bottom - 4), obj_onewaygate_right, 0, 0)))
    x -= xx
if (vspeed &lt; 0 &amp;&amp; (collision_rectangle(bbox_left, (bbox_top - vspeed), bbox_right, bbox_top, obj_solid, 1, 0) || collision_rectangle(bbox_left, (bbox_top - vspeed), bbox_right, bbox_top, obj_physicssolid, 1, 0) || collision_rectangle(bbox_left, (bbox_top - vspeed), bbox_right, bbox_top, obj_bullebill_base, 1, 0) || collision_rectangle(bbox_left, (bbox_top - vspeed), bbox_right, bbox_top, obj_onewaygate_bottom, 1, 0)))
    y += xx
if (vspeed &gt; 0 &amp;&amp; (collision_rectangle(bbox_left, bbox_bottom, bbox_right, (bbox_bottom + vspeed), obj_solid, 1, 0) || collision_rectangle(bbox_left, bbox_bottom, bbox_right, (bbox_bottom + vspeed), obj_physicssolid, 1, 0)))
    y -= xx
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var left, right, up, down, diff;
if (instance_exists(obj_mario) &amp;&amp; (collision_rectangle((bbox_left - 2), (bbox_top - 1), (bbox_right + 1), (bbox_bottom + 1), obj_muncher, 0, 0) || collision_rectangle((bbox_left - 2), (bbox_top - 1), (bbox_right + 1), (bbox_bottom + 1), obj_pinchos, 0, 0)))
{
    with (obj_mario)
        event_user(0)
}
if (instance_exists(obj_mario) &amp;&amp; global.powerup == -82)
{
    obj_mario.visible = false
    obj_mario.x = x
    obj_mario.y = (y - 24)
    obj_mario.speed = 0
    obj_mario.state = 0
    obj_mario.holding = 0
    obj_mario.disablecontrols = 1
    obj_mario.stompstyle = 0
}
else if instance_exists(obj_player_goal_parent)
{
    obj_player_goal_parent.visible = false
    obj_player_goal_parent.x = (x + 3)
    obj_player_goal_parent.y = (y - 16)
    obj_player_goal_parent.speed = 0
    ready = 0
}
else if (!instance_exists(obj_mario_transform2))
    instance_destroy()
if instance_exists(obj_helmet)
{
    xDiff_h = lengthdir_x(8, direction)
    yDiff_h = lengthdir_y(8, direction)
    obj_helmet.x = (x + xDiff_h)
    obj_helmet.y = (y + yDiff_h)
}
event_user(0)
event_user(1)
event_user(3)
event_user(4)
if (ready == 2 &amp;&amp; speed != 0)
{
    if (!audio_is_playing(snd_pballon_c))
        audio_play_sound(snd_pballon_c, 1, true)
}
else
    audio_stop_sound(snd_pballon_c)
if instance_exists(obj_mario)
{
    if (keyboard_check(global.saltar) || keyboard_check(global.lanzar_agarrar))
        ready = 2
    else
        ready = 0
    left = keyboard_check(global.izquierda)
    right = keyboard_check(global.derecha)
    up = keyboard_check(global.arriba)
    down = keyboard_check(global.abajo)
}
else if instance_exists(obj_player_goal_parent)
{
    left = -1
    down = -1
    if (mov == 1)
    {
        if (global.bg_level == "castle")
        {
            right = 1
            up = -1
        }
        else if (x &gt;= ((obj_goalgate_front.x - 8) + 71))
        {
            right = -1
            up = -1
            mov = 2
        }
        else
        {
            right = 1
            up = -1
        }
    }
    else if (mov == 2)
    {
        right = -1
        if (direction == 90)
            up = -1
        else
            up = 1
    }
    else
    {
        right = -1
        left = -1
        down = -1
        up = -1
    }
}
else
{
    right = -1
    left = -1
    down = -1
    up = -1
}
if left
{
    moving = 1
    if up
        angle = 135
    else if down
        angle = 225
    else
        angle = 180
}
else if right
{
    moving = 1
    if up
        angle = 45
    else if down
        angle = 315
    else
        angle = 0
}
else if down
{
    moving = 1
    if left
        angle = 225
    else if right
        angle = 315
    else
        angle = 270
}
else if up
{
    moving = 1
    if left
        angle = 135
    else if right
        angle = 45
    else
        angle = 90
}
else
    moving = 0
if (moving == 1)
{
    speed += 0.03
    diff = angle_difference(direction, angle)
    direction -= (min((1 * sign(diff)), abs(diff)) * 5)
    image_angle = direction
}
if (ready == 2)
    max_speed = 2
else
    max_speed = 0.6
if (speed &gt; max_speed)
    speed = max_speed
if (abs(speed) &lt; 1)
    xx = 1
else
    xx = abs(speed)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_player_goal_smw_castle)
    fallow = 210
else if instance_exists(obj_player_goal_smw)
    fallow = 209
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var col_one_top, block, col_one_bottom;
if (collision_rectangle(bbox_left, (bbox_bottom - 1), bbox_right, (bbox_bottom + 1), obj_solidtop, 0, 0) &amp;&amp; ((!collision_rectangle(bbox_left, (bbox_bottom - 4), bbox_right, (bbox_bottom - 4), obj_solidtop, 0, 0)) || collision_rectangle(bbox_left, (bbox_bottom - 1), bbox_right, (bbox_bottom + 1), obj_physicssolid, 0, 0)) &amp;&amp; (!collision_rectangle(bbox_left, (bbox_bottom - 4), bbox_right, (bbox_bottom - 4), obj_physicssolid, 0, 0)))
{
    if (vspeed &gt; 0)
    {
        col_one_top = collision_rectangle(bbox_left, (bbox_bottom + 1), bbox_right, (bbox_bottom + 1), obj_onewaygate_top, 0, 0)
        if col_one_top
        {
            with (col_one_top)
            {
                rot = 1
                event_user(0)
            }
        }
        block = collision_rectangle(bbox_left, (bbox_bottom + 2), bbox_right, (bbox_bottom + 2), obj_blockparent, 0, 0)
        if (speed &gt; 1 &amp;&amp; block &amp;&amp; block.ready == 0)
        {
            with (block)
                event_user(3)
        }
        if (vspeed &gt; 0.1)
            speed = (-speed)
        else
            speed = 0
    }
    while (collision_rectangle(bbox_left, (bbox_bottom - 1), bbox_right, (bbox_bottom - 1), obj_solidtop, 0, 0) &amp;&amp; (!place_meeting(x, y, obj_solidtop)))
        y--
    while (collision_rectangle(bbox_left, (bbox_bottom - 1), bbox_right, (bbox_bottom - 1), obj_physicssolid, 0, 0) &amp;&amp; (!place_meeting(x, y, obj_physicssolid)))
        y--
}
if (vspeed &lt; 0)
{
    if (collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_solid, 1, 0) || collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_hurtsolid2, 1, 0) || collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_solidphy, 1, 0) || collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_bullebill_base, 1, 0) || collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top, obj_onewaygate_bottom, 1, 0))
    {
        while (collision_rectangle(bbox_left, (bbox_top + 1), bbox_right, (bbox_top + 1), obj_solid, 1, 0) &amp;&amp; (!place_meeting(x, y, obj_solid)))
            y++
        while (collision_rectangle(bbox_left, (bbox_top + 1), bbox_right, (bbox_top + 1), obj_physicssolid, 1, 0) &amp;&amp; (!place_meeting(x, y, obj_physicssolid)))
            y++
        while (collision_rectangle(bbox_left, (bbox_top + 1), bbox_right, (bbox_top + 1), obj_bullebill_base, 1, 0) &amp;&amp; (!place_meeting(x, y, obj_bullebill_base)))
            y++
        col_one_bottom = collision_rectangle((bbox_left + 1), ((bbox_top + vspeed) - 1), (bbox_right - 1), (bbox_top - 1), obj_onewaygate_bottom, 1, 0)
        if col_one_bottom
        {
            with (col_one_bottom)
            {
                rot = 1
                event_user(0)
            }
        }
        block = collision_rectangle(bbox_left, (bbox_top - 2), bbox_right, (bbox_top - 2), obj_blockparent, 0, 0)
        if (vspeed &lt; -1 &amp;&amp; block &amp;&amp; block.ready == 0)
        {
            with (block)
                event_user(2)
        }
        if (vspeed &lt; -0.1)
            speed = (-speed)
        else
            speed = 0
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var col_one_left, col_one_right, block_right, block_left;
if ((hspeed &gt; 0 &amp;&amp; collision_rectangle(bbox_right, (bbox_top + 1), (bbox_right + 1), (bbox_bottom - 4), obj_solid, 0, 0)) || (hspeed &lt; 0 &amp;&amp; collision_rectangle((bbox_left - 1), (bbox_top + 1), bbox_left, (bbox_bottom - 4), obj_solid, 0, 0)) || (hspeed &gt; 0 &amp;&amp; collision_rectangle(bbox_right, (bbox_top + 1), (bbox_right + 1), (bbox_bottom - 4), obj_physicssolid, 0, 0)) || (hspeed &lt; 0 &amp;&amp; collision_rectangle((bbox_left - 1), (bbox_top + 1), bbox_left, (bbox_bottom - 4), obj_physicssolid, 0, 0)) || (hspeed &gt; 0 &amp;&amp; collision_rectangle(bbox_right, (bbox_top + 1), (bbox_right + 1), (bbox_bottom - 4), obj_bullebill_base, 0, 0)) || (hspeed &lt; 0 &amp;&amp; collision_rectangle((bbox_left - 1), (bbox_top + 1), bbox_left, (bbox_bottom - 4), obj_bullebill_base, 0, 0)) || (hspeed &gt; 0 &amp;&amp; collision_rectangle(bbox_right, (bbox_top + 1), (bbox_right + 1), (bbox_bottom - 4), obj_onewaygate_left, 0, 0)) || (hspeed &lt; 0 &amp;&amp; collision_rectangle((bbox_left - 1), (bbox_top + 1), bbox_left, (bbox_bottom - 4), obj_onewaygate_right, 0, 0)))
{
    col_one_left = collision_rectangle(bbox_right, (bbox_top + 1), (bbox_right + 1), (bbox_bottom - 4), obj_onewaygate_left, 0, 0)
    col_one_right = collision_rectangle((bbox_left - 1), (bbox_top + 1), bbox_left, (bbox_bottom - 4), obj_onewaygate_right, 0, 0)
    if (speed &gt; 0 &amp;&amp; col_one_left)
    {
        with (col_one_left)
        {
            rot = 1
            event_user(0)
        }
    }
    if (speed &lt; 0 &amp;&amp; col_one_right)
    {
        with (col_one_right)
        {
            rot = 1
            event_user(0)
        }
    }
    block_right = collision_rectangle((bbox_left - 2), (bbox_top + 4), bbox_left, (bbox_bottom - 4), obj_blockparent, 1, 0)
    block_left = collision_rectangle(bbox_right, (bbox_top + 4), (bbox_right + 2), (bbox_bottom - 4), obj_blockparent, 1, 0)
    if (hspeed &lt; -1 &amp;&amp; block_right &amp;&amp; block_right.ready == 0)
    {
        with (block_right)
            event_user(2)
    }
    else if (speed &gt; 1 &amp;&amp; block_left &amp;&amp; block_left.ready == 0)
    {
        with (block_left)
            event_user(2)
    }
    speed = (-speed)
    while collision_rectangle(bbox_right, (bbox_top + 4), bbox_right, (bbox_bottom - 4), obj_solid, 1, 0)
        x--
    while collision_rectangle(bbox_left, (bbox_top + 4), bbox_left, (bbox_bottom - 4), obj_solid, 1, 0)
        x++
    while collision_rectangle(bbox_right, (bbox_top + 4), bbox_right, (bbox_bottom - 4), obj_physicssolid, 1, 0)
        x--
    while collision_rectangle(bbox_left, (bbox_top + 4), bbox_left, (bbox_bottom - 4), obj_physicssolid, 1, 0)
        x++
    while collision_rectangle(bbox_right, (bbox_top + 4), bbox_right, (bbox_bottom - 4), obj_bullebill_base, 1, 0)
        x--
    while collision_rectangle(bbox_left, (bbox_top + 4), bbox_left, (bbox_bottom - 4), obj_bullebill_base, 1, 0)
        x++
    while collision_rectangle(bbox_right, (bbox_top + 4), bbox_right, (bbox_bottom - 4), obj_onewaygate_left, 1, 0)
        x--
    while collision_rectangle(bbox_left, (bbox_top + 4), bbox_left, (bbox_bottom - 4), obj_onewaygate_right, 1, 0)
        x++
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var xDiff, yDiff;
if (ready == 2 &amp;&amp; speed != 0)
{
    time--
    if (time &lt;= 0)
    {
        xDiff = lengthdir_x(12, (direction - 180))
        yDiff = lengthdir_y(12, (direction - 180))
        with (instance_create((x + xDiff), (y + yDiff), obj_smoke))
        {
            sprite_index = spr_smoke_pballoon
            image_angle = other.direction
            image_speed = 0.1
        }
        time = 10
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (ready == 2 &amp;&amp; speed != 0)
{
    if (inf == 0)
    {
        image_yscale -= 0.05
        if (image_yscale &lt; 0.9)
            inf = 1
    }
    else
    {
        image_yscale += 0.05
        if (image_yscale &gt; 1)
            inf = 0
    }
    image_xscale = 1
}
else
{
    if (inf == 0)
    {
        image_xscale -= 0.01
        if (image_xscale &lt; 0.9)
            inf = 1
    }
    else
    {
        image_xscale += 0.01
        if (image_xscale &gt; 1)
            inf = 0
    }
    image_yscale = 1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, c_white, 1)
if instance_exists(obj_mario)
{
    if (instance_exists(obj_invincibility) &amp;&amp; global.effect_star == 1)
    {
        shader_set(sha_blendreplace)
        draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, obj_mario.blend_star, obj_mario.flashAlpha)
        shader_reset()
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
