<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_grid_selected_32x32</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>11</depth>
  <persistent>0</persistent>
  <parentName>obj_solid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var dark;
if (global.bg_level == "castle" || global.bg_level == "ghost" || global.bg_level == "underground" || global.modo_noche == 1)
    dark = 1
else
    dark = 0
switch global.apariencia
{
    case 0:
        sprite = 593
        part = 594
        break
    case 1:
        if (dark == 1)
        {
            sprite = 1397
            part = 1398
        }
        else
        {
            sprite = 1395
            part = 1396
        }
        break
    case 2:
        sprite = 2327
        part = 2328
        break
    case 3:
        sprite = 3701
        part = 3702
        break
}

image_speed = 0
image_index = 0
color = 0
rotacion = 0
direct = 1
size = 0
direct_t = 0
index = 0
holding = 0
helmet = 0
m_posx = x
m_posy = y
warp = 0
w_x_pos = (x + 32)
w_y_pos = y
w_direct = 0
w_size = 0
w_rotacion = 0
w_s_scalex = 1
w_color = 0
w_xscale = 1
w_yscale = 1
w_posx = x
w_posy = y
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var pipe;
with (instance_create(w_posx, w_posy, obj_curtainin))
    fallow = 1
if instance_exists(obj_autoscroll)
{
    with (obj_autoscroll)
    {
        if ((other.w_posx + 16) &lt; 192)
            x = 192
        else
            x = (other.w_posx + 16)
        hspeed = velocidad
    }
}
switch w_direct
{
    case 0:
        pipe = instance_create(w_posx, w_posy, obj_player_warp)
        with (pipe)
        {
            direction = 90
            direct = 1
        }
        break
    case 1:
        pipe = instance_create(w_posx, (w_posy - 1), obj_player_warp)
        with (pipe)
        {
            direction = 0
            direct = 1
        }
        break
    case 2:
        pipe = instance_create(w_posx, (w_posy - 16), obj_player_warp)
        with (pipe)
        {
            direction = 270
            direct = 1
        }
        break
    case 3:
        pipe = instance_create(w_posx, (w_posy - 1), obj_player_warp)
        with (pipe)
        {
            direction = 180
            direct = -1
        }
        break
}

with (pipe)
{
    canmove = 0
    alarm[0] = 30
    salir = 1
    holding = other.holding
    helmet = other.helmet
    myitem = global.warp_item
    alarm[2] = 1
    w_posx = other.m_posx
    w_posy = other.m_posy
    w_direct = other.direct_t
}
with (obj_levelmanager)
{
    barrier = 1
    alarm[6] = 2
}
with (obj_persistent)
    event_user(0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (instance_create(w_x_pos, w_y_pos, obj_tuberia))
{
    warp = 2
    size = other.w_size
    direct = other.w_s_scalex
    direct_t = other.w_direct
    rotacion = other.w_rotacion
    index = other.w_color
    image_xscale = other.w_xscale
    image_yscale = other.w_yscale
    w_posx = other.m_posx
    w_posy = other.m_posy
    w_direct = other.direct_t
    switch direct_t
    {
        case 0:
            m_posx = (x + 16)
            m_posy = y
            break
        case 1:
            m_posx = (x + (16 + (size * 16)))
            m_posy = y
            break
        case 2:
            m_posx = (x + 16)
            m_posy = (y + (16 + (size * 16)))
            break
        case 3:
            m_posx = (x + 16)
            m_posy = y
            break
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(obj_mario) &amp;&amp; warp &gt; 0)
{
    if (direct_t == 0 &amp;&amp; keyboard_check(global.abajo) &amp;&amp; (!collision_rectangle((x + 8), (y - 8), (x + 24), (y - 4), obj_solid, 0, 0)) &amp;&amp; (!collision_rectangle((x + 8), (y - 8), (x + 24), (y - 4), obj_physicssolid, 0, 0)) &amp;&amp; (!collision_rectangle((x + 8), (y - 8), (x + 24), (y - 4), obj_bullebill_base, 0, 0)))
    {
        player = collision_rectangle((x + 13), (y - 4), (x + 19), (y - 4), obj_mario, 0, 0)
        if player
        {
            warpme = instance_create(obj_mario.x, obj_mario.y, obj_player_warp)
            warpme.direct = player.direct
            warpme.direction = 270
            warpme.destruir = 1
            warpme.pos_center = (x + 16)
            holding = obj_mario.holding
            helmet = obj_mario.helmet
            with (warpme)
                event_user(0)
            global.warp_x = m_posx
            global.warp_y = m_posy
            alarm[1] = 35
            with (obj_mario)
                instance_destroy()
        }
    }
    else if (direct_t == 1 &amp;&amp; keyboard_check(global.izquierda) &amp;&amp; (obj_mario.state &lt; 2 || global.powerup == -82) &amp;&amp; (!collision_rectangle((bbox_right + 8), (y + 8), (bbox_right + 8), (y + 24), obj_solid, 0, 0)) &amp;&amp; (!collision_rectangle((bbox_right + 8), (y + 8), (bbox_right + 8), (y + 24), obj_physicssolid, 0, 0)) &amp;&amp; (!collision_rectangle((bbox_right + 8), (y + 8), (bbox_right + 8), (y + 24), obj_bullebill_base, 0, 0)))
    {
        player = collision_rectangle((bbox_right + 2), (y + 28), (bbox_right + 2), (y + 32), obj_mario, 0, 0)
        if (player &amp;&amp; obj_mario.y &lt;= (y + 8))
        {
            warpme = instance_create(obj_mario.x, (obj_mario.y - 2), obj_player_warp)
            warpme.direct = player.direct
            warpme.direction = 180
            warpme.destruir = 1
            holding = obj_mario.holding
            helmet = obj_mario.helmet
            with (warpme)
                event_user(0)
            global.warp_x = m_posx
            global.warp_y = m_posy
            alarm[1] = 45
            with (obj_mario)
                instance_destroy()
        }
    }
    else if (direct_t == 2 &amp;&amp; keyboard_check(global.arriba) &amp;&amp; (!collision_rectangle((x + 8), (bbox_bottom + 8), (x + 24), (bbox_bottom + 8), obj_solid, 0, 0)) &amp;&amp; (!collision_rectangle((x + 8), (bbox_bottom + 8), (x + 24), (bbox_bottom + 8), obj_physicssolid, 0, 0)) &amp;&amp; (!collision_rectangle((x + 8), (bbox_bottom + 8), (x + 24), (bbox_bottom + 8), obj_bullebill_base, 0, 0)))
    {
        player = collision_rectangle((x + 13), (bbox_bottom + 2), (x + 19), (bbox_bottom + 2), obj_mario, 0, 0)
        if player
        {
            warpme = instance_create(obj_mario.x, obj_mario.y, obj_player_warp)
            warpme.direct = player.direct
            warpme.direction = 90
            warpme.destruir = 1
            warpme.pos_center = (x + 16)
            holding = obj_mario.holding
            helmet = obj_mario.helmet
            with (warpme)
                event_user(0)
            global.warp_x = m_posx
            global.warp_y = m_posy
            alarm[1] = 35
            with (obj_mario)
                instance_destroy()
        }
    }
    else if (direct_t == 3 &amp;&amp; keyboard_check(global.derecha) &amp;&amp; (obj_mario.state &lt; 2 || global.powerup == -82) &amp;&amp; (!collision_rectangle((x - 8), (y + 8), (x - 8), (y + 24), obj_solid, 0, 0)) &amp;&amp; (!collision_rectangle((x - 8), (y + 8), (x - 8), (y + 24), obj_physicssolid, 0, 0)) &amp;&amp; (!collision_rectangle((x - 8), (y + 8), (x - 8), (y + 24), obj_bullebill_base, 0, 0)))
    {
        player = collision_rectangle((x - 2), (y + 28), (x - 2), (y + 32), obj_mario, 0, 0)
        if (player &amp;&amp; obj_mario.y &lt;= (y + 8))
        {
            warpme = instance_create(obj_mario.x, (obj_mario.y - 2), obj_player_warp)
            warpme.direct = player.direct
            warpme.direction = 0
            warpme.destruir = 1
            holding = obj_mario.holding
            helmet = obj_mario.helmet
            with (warpme)
                event_user(0)
            global.warp_x = m_posx
            global.warp_y = m_posy
            alarm[1] = 45
            with (obj_mario)
                instance_destroy()
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i;
switch direct_t
{
    case 0:
        draw_sprite_ext(sprite, index, (x + 16), (y + 16), direct, 1, rotacion, c_white, 1)
        break
    case 1:
        draw_sprite_ext(sprite, index, (x + (16 + (size * 16))), (y + 16), direct, 1, rotacion, c_white, 1)
        break
    case 2:
        draw_sprite_ext(sprite, index, (x + 16), (y + (16 + (size * 16))), direct, 1, rotacion, c_white, 1)
        break
    case 3:
        draw_sprite_ext(sprite, index, (x + 16), (y + 16), direct, 1, rotacion, c_white, 1)
        break
}

if (size &gt; 0)
{
    for (i = 1; i &lt; (size + 1); i++)
    {
        switch direct_t
        {
            case 0:
                draw_sprite_ext(part, index, (x + 16), ((y + 16) + (i * 16)), direct, 1, rotacion, c_white, 1)
                break
            case 1:
                draw_sprite_ext(part, index, ((x + (16 + (size * 16))) - (i * 16)), (y + 16), direct, 1, rotacion, c_white, 1)
                break
            case 2:
                draw_sprite_ext(part, index, (x + 16), ((y + (16 + (size * 16))) - (i * 16)), direct, 1, rotacion, c_white, 1)
                break
            case 3:
                draw_sprite_ext(part, index, ((x + 16) + (i * 16)), (y + 16), direct, 1, rotacion, c_white, 1)
                break
        }

    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
